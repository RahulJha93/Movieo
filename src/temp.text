herobanner content:
import React, { useState } from "react";
import { useEffect } from "react";

import { useNavigate } from "react-router-dom";
import "./herobanner.scss";
import useFetch from "../../../hooks/useFetch";
import { useSelector } from "react-redux";
import ContentWrapper from "../../../components/contentWrapper/ContentWrapper";
import Img from "../../../components/lazyLoadImage/img";

const HeroBanner = () => {
  const [background, setBackgound] = useState("");
  const [query, setQuery] = useState("");
  const [index,setIndex] = useState("");
  const { data, loading } = useFetch('/trending/movie/day')
  const { url } = useSelector((state) => state.home)
  const navigate = useNavigate();

  useEffect(() => {
    const number = Math.floor(Math.random() * 20);
    setIndex(number)
    // const bgURL = url.backdrop + data?.results?.[number]?.backdrop_path;
    const bgURL = "http://image.tmdb.org/t/p/original" + data?.results?.[number]?.backdrop_path;
    // This is called "Optional chaining". Say you make an axios request and expect the response.data object. You don't KNOW if data will be there, but you expect it to. The question mark is a shorthand for writing data && data.results If data is undefined, the data.name code does not run and thus you don't get an error (cannot access name of undefined)
    setBackgound(bgURL)
  }, [data]);


  const queryhandler = (event) => {
    if (event.key === "Enter" && query.length > 0) {
      navigate(`/search/${query}`);
    }

  }
  return (
      <div className="heroBanner">
        {!loading && <div className="backdrop-img">
          <Img src={background} alt=""/>
        </div>}
        <ContentWrapper>
          <div className="heroBannerContent">
            <span className="title">{data?.results?.[index]?.title}</span>
            <span className="subTitle">Millions of movies, TV shows and people to discover. Explore now.</span>
            <div className="searchInput">
              <input type="text" placeholder="Search for a Movie or Series" onChange={(e) => setQuery(e.target.value)} onKeyUp={queryhandler} />
              <button>Search</button>
            </div>
          </div>
        </ContentWrapper>
      </div>
  );
};

export default HeroBanner;

{moviesItem?.results.map((items, index) => {
          return <div className="carousel-item active"key={index}>
            <img src={"http://image.tmdb.org/t/p/original/" + items?.backdrop_path} alt="" />
          </div>


        })}

